package com.tsys.digital.repository

import com.tsys.digital.domain.Location
import com.tsys.digital.domain.repository.RandomIdGenerator
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.geo.{Circle, Point}
import org.springframework.data.redis.connection.RedisGeoCommands.GeoRadiusCommandArgs
import org.springframework.data.redis.core.RedisTemplate
import org.springframework.stereotype.Repository

import scala.util.Try;

@Repository
class RedisLocationRepository(@Autowired private val redisTemplate:RedisTemplate[String, String], @Autowired private val randomIdGenerator: RandomIdGenerator) extends LocationRepository {
  private val geoOps = redisTemplate.opsForGeo()
  private val zsetOps = redisTemplate.opsForZSet()
  private val hashOps = redisTemplate.opsForHash[String, Any]()

  override def save(location: Location): Location = {
    val idAllocated: Location = location.copy(id = randomIdGenerator.generateId)
    val typeKey: String = idAllocated.typeKey
//    println("key = " +typeKey)
    val longitude: Double = idAllocated.toGeoLocation.longitude
    val latitude: Double = idAllocated.toGeoLocation.latitude
    try {
      redisTemplate.multi()
      import scala.collection.JavaConverters._
//      println("map = " + idAllocated.toMap.asJava)
      //HashKey is type:id
      hashOps.putAll(typeKey, idAllocated.toMap.asJava)
      //GeoKey is country code
      geoOps.add(s"Country:${idAllocated.country}", new Point(longitude, latitude), idAllocated.typeKey)
      redisTemplate.exec()
    } catch {
      case e: Exception => {
        redisTemplate.discard()
        e.printStackTrace(System.out)
      }
    }
    idAllocated
  }

  override def locationsBy(longitude: Double, latitude: Double) = {
    val within: Circle = new Circle(new Point(longitude, latitude), 1)
    val radiusArgs = GeoRadiusCommandArgs.newGeoRadiusArgs()
      .includeCoordinates()
      .includeDistance()
      .sortAscending()


    import scala.collection.JavaConverters._
    for {
      key <- Try { redisTemplate.keys("Country:*").asScala }.toOption.toSet
      results <- Try { geoOps.radius(key, within, radiusArgs).asScala }.toOption
    }
    Nil
  }
//  @Override
//  public Iterable[Location] saveAll(Iterable[Location] postOffices) {
//    final List[Location] pos = new ArrayList[]();
//    postOffices.forEach(postOffice -] pos.add(save(postOffice)));
//    return pos;
//  }
//
//  @Override
//  public Optional[Location] findFirstByName(String postOfficeName) {
//    for (final String key : keys) {
//      if (redisTemplate.hasKey(key))
//        return Optional.ofNullable(redisTemplate.execute(new RedisCallback[Location]() {
//          @Override
//          public Location doInRedis(RedisConnection connection) throws DataAccessException {
//            final List[Point] points = connection.geoCommands().geoPos(key.getBytes(), postOfficeName.getBytes());
//            final Point point = points.get(0);
//            return new Location(key, new GeoLocation(point.getX(), point.getY(), postOfficeName));
//          }
//        }));
//    }
//    return Optional.empty();
//  }
//
//  @Override
//  public Iterable[Location] findAll() {
//    final Set[Location] postOffices = new HashSet[]();
//    for (final String key : keys) {
//      if (redisTemplate.hasKey(key)) {
//        final Long size = zsetOps.size(key);
//        final Set[Location] range = zsetOps.range(key, 0, size);
//        postOffices.addAll(range);
//      }
//    }
//    return postOffices;
//  }
//
//  @Override
//  public Iterable[Location] findAllByName(String postOfficeNameRegex) {
//    final ScanOptions scanOptions = ScanOptions.scanOptions()
//        .match(postOfficeNameRegex)
//        .build();
//
//    final Set[Location] postOffices = new HashSet[]();
//    for (final String key : keys) {
//      if (redisTemplate.hasKey(key)) {
//        try (Cursor[ZSetOperations.TypedTuple[Location]] scan = zsetOps.scan(key, scanOptions)) {
//          scan.open().forEachRemaining(tuple -] {
//            final Location postOffice = tuple.getValue();
//            postOffices.add(postOffice);
//          });
//        } catch (IOException e) {
//          e.printStackTrace();
//        }
//
////        final Long size = zsetOps.size(key);
////        final Set[Location] range = zsetOps.range(key, 0, size)
////            .stream()
////            .parallel()
////            .filter(postOffice -] postOffice.geo().name().matches(postOfficeNameRegex))
////            .collect(Collectors.toSet());
////        postOffices.addAll(range);
//      }
//    }
//    return postOffices;
//  }
//
//
//  @Override
//  public long count() {
//    long count = 0;
//    for (final String key : keys) {
//      if (redisTemplate.hasKey(key)) {
//        count += zsetOps.size(key);
//      }
//    }
//    return count;
//  }
//
//  @Override
//  public void delete(Location postOffice) {
//    this.geoOps.remove(postOffice.state(), postOffice);
//  }
//
//  @Override
//  public void deleteAll(Iterable[Location] pos) {
//    pos.forEach(postOffice -] delete(postOffice));
//  }
//
//  @Override
//  public void deleteAll() {
//    for (final String key : keys) {
//      if (redisTemplate.hasKey(key)) {
//        try (final Cursor[ZSetOperations.TypedTuple[Location]] scan = zsetOps.scan(key, ScanOptions.NONE)) {
//          scan.open();
//        } catch (IOException e) {
//          e.printStackTrace();
//        }
//      }
//    }
//  }

}
